#+title: Readme

Scheme interpreter

* Installation
build from source
#+begin_src bash
git clone https://github.com/garlic0x1/scheme-interpreter.git
cd scheme-interpreter
cargo install --path .
scheme-interpreter
#+end_src
* Usage
the app evaluates lines from stdin

to run a file, start the repl and use something like this
#+begin_src clj
lisp> (eval (read (str "(do " (slurp "test.scm") ")")))
#+end_src

if you evaluate the test.scm you will have access to the `load-file` function which does the same as the above expression
#+begin_src clj
(load-file "test.scm")
#+end_src
* Implemented
A list of what is done
** special forms:
- eval
  #+begin_src clj
  (eval (quote (println {:hi "world"})))
  #+end_src
  evaluate Edn as lisp
- lambda
  #+begin_src clj
  (lambda [x] (println x))
  #+end_src
  Create an anonymous function
- def
  #+begin_src clj
  (def x "var")
  #+end_src
  Define in global namespace
- if
  #+begin_src clj
  (if pred? then else)
  #+end_src
  If statement, returns branch.
  nil, false, 0, "", etc are falsy
- do
  #+begin_src clj
  (do (println "1") (println "2"))
  #+end_src
  Evaluate multiple exprs, return last
- quote
  #+begin_src clj
  (quote (1 2 3))
  #+end_src
  Return list without evaluating
** native fns:
- conj
- cons
- car
- cdr
- =
- +
- *
- /
- mod
- int
- str
- type
- read
- slurp
- println
